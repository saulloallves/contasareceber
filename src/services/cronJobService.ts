import { automacaoNotificacaoService } from './automacaoNotificacaoService';

export class CronJobService {
  private intervalId: NodeJS.Timeout | null = null;
  private executando = false;
  private horarioExecucao = { hora: 9, minuto: 0 }; // 9:00 AM

  /**
   * Inicia o agendador para rodar uma vez por dia no hor√°rio configurado
   */
  iniciar(): void {
    console.log('üöÄ Iniciando agendador de verifica√ß√£o de cobran√ßas...');
    
    // Calcula pr√≥xima execu√ß√£o
    const proximaExecucao = this.calcularProximaExecucao();
    const tempoAteProximaExecucao = proximaExecucao.getTime() - new Date().getTime();
    
    // Agenda primeira execu√ß√£o
    setTimeout(() => {
      this.executarTarefa();
      
      // Depois agenda para repetir a cada 24 horas
      this.intervalId = setInterval(() => {
        this.executarTarefa();
      }, 24 * 60 * 60 * 1000);
      
    }, tempoAteProximaExecucao);
    
    console.log(`‚è∞ Pr√≥xima execu√ß√£o agendada para: ${proximaExecucao.toLocaleString('pt-BR')}`);
  }

  /**
   * Para o agendador
   */
  parar(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
      console.log('‚è∏Ô∏è Agendador de verifica√ß√£o parado');
    }
  }

  /**
   * Configura hor√°rio de execu√ß√£o
   */
  configurarHorario(hora: number, minuto: number): void {
    if (hora < 0 || hora > 23 || minuto < 0 || minuto > 59) {
      throw new Error('Hor√°rio inv√°lido. Hora: 0-23, Minuto: 0-59');
    }
    
    this.horarioExecucao = { hora, minuto };
    console.log(`‚è∞ Hor√°rio de execu√ß√£o configurado para ${hora.toString().padStart(2, '0')}:${minuto.toString().padStart(2, '0')}`);
    
    // Reinicia o agendador com novo hor√°rio
    if (this.intervalId) {
      this.parar();
      this.iniciar();
    }
  }

  /**
   * Verifica se o agendador est√° ativo
   */
  estaAtivo(): boolean {
    return this.intervalId !== null;
  }

  /**
   * Executa a verifica√ß√£o se n√£o estiver j√° executando
   */
  private async executarTarefa(): Promise<void> {
    if (this.executando) {
      console.log('‚è≠Ô∏è Verifica√ß√£o j√° est√° executando, pulando...');
      return;
    }

    this.executando = true;
    
    try {
      console.log('üîÑ Iniciando execu√ß√£o autom√°tica do fluxo de notifica√ß√µes...');
      
      // Usa o novo m√©todo integrado que j√° envia WhatsApp e Email
      await automacaoNotificacaoService.executarCronJob();
      
      console.log(`‚úÖ Execu√ß√£o autom√°tica conclu√≠da`);
    } catch (error) {
      console.error('‚ùå Erro na execu√ß√£o autom√°tica:', error);
    } finally {
      this.executando = false;
    }
  }

  /**
   * Calcula pr√≥xima execu√ß√£o no hor√°rio configurado
   */
  private calcularProximaExecucao(): Date {
    const agora = new Date();
    const proximaExecucao = new Date();
    proximaExecucao.setHours(this.horarioExecucao.hora, this.horarioExecucao.minuto, 0, 0);
    
    // Se j√° passou do hor√°rio hoje, agenda para amanh√£
    if (proximaExecucao <= agora) {
      proximaExecucao.setDate(proximaExecucao.getDate() + 1);
    }
    
    return proximaExecucao;
  }

  /**
   * Execu√ß√£o manual para testes
   */
  async executarManualmente(): Promise<void> {
    console.log('üîÑ Executando fluxo manual completo...');
    try {
      const resultado = await automacaoNotificacaoService.executarFluxoCompleto();
      
      console.log('\nüìä Resultado da Execu√ß√£o Manual:');
      console.log(`   ‚Ä¢ Total processadas: ${resultado.total_processadas}`);
      console.log(`   ‚Ä¢ WhatsApp enviados: ${resultado.whatsapp_enviados}`);
      console.log(`   ‚Ä¢ Emails enviados: ${resultado.emails_enviados}`);
      console.log(`   ‚Ä¢ Erros: ${resultado.erros.length}`);
      
      if (resultado.erros.length > 0) {
        console.log('\n‚ùå Detalhes dos erros:');
        resultado.erros.forEach((erro, index) => {
          console.log(`   ${index + 1}. Cobran√ßa ${erro.cobranca_id} (${erro.canal}): ${erro.erro}`);
        });
      }
      
      if (resultado.detalhes.length > 0) {
        console.log('\nüìã Resumo das notifica√ß√µes enviadas:');
        resultado.detalhes.forEach((detalhe, index) => {
          const status = [];
          if (detalhe.whatsapp_enviado) status.push('WhatsApp ‚úÖ');
          if (detalhe.email_enviado) status.push('Email ‚úÖ');
          if (status.length === 0) status.push('Nenhum envio');
          
          console.log(`   ${index + 1}. ${detalhe.nome_franqueado} (${detalhe.unidade}) - Marco ${detalhe.marco} dias - ${status.join(', ')}`);
        });
      }
      
    } catch (error) {
      console.error('‚ùå Erro na execu√ß√£o manual:', error);
    }
  }

  /**
   * Retorna informa√ß√µes sobre o pr√≥ximo agendamento
   */
  obterProximoAgendamento(): { 
    proximaExecucao: Date | null; 
    tempoRestante: string;
    estaAtivo: boolean;
  } {
    if (!this.estaAtivo()) {
      return {
        proximaExecucao: null,
        tempoRestante: 'Agendador inativo',
        estaAtivo: false
      };
    }

    const proximaExecucao = this.calcularProximaExecucao();
    const agora = new Date();
    const diferencaMilis = proximaExecucao.getTime() - agora.getTime();
    
    const horas = Math.floor(diferencaMilis / (1000 * 60 * 60));
    const minutos = Math.floor((diferencaMilis % (1000 * 60 * 60)) / (1000 * 60));
    
    const tempoRestante = horas > 0 
      ? `${horas}h ${minutos}m`
      : `${minutos}m`;

    return {
      proximaExecucao,
      tempoRestante,
      estaAtivo: true
    };
  }
}

export const cronJobService = new CronJobService();
